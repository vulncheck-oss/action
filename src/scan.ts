import crypto from 'crypto'
import { exec } from '@actions/exec'
import * as fs from 'fs/promises'
import * as core from '@actions/core'
import * as github from '@actions/github'

interface ScanResult {
  vulnerabilities: ScanResultVulnerability[]
}

interface ScanResultVulnerability {
  name: string
  version: string
  cve: string
  cvss_base_score: string
  cvss_temporal_score: string
  fixed_versions: string
}

export async function scan(): Promise<void> {
  core.info('Running CLI command: scan')
  await exec('vci scan ./repos/npm-two -f')
  const output: ScanResult = JSON.parse(
    await fs.readFile('output.json', 'utf8'),
  )

  const hash = crypto.createHash('sha256')
  hash.update(JSON.stringify(output))
  const signature = hash.digest('hex')

  core.setOutput('scan-count', output.vulnerabilities.length.toString())
  core.setOutput('scan-signature', signature)
  core.setOutput('scan-output', JSON.stringify(output))

  if (
    github.context.payload.pull_request &&
    output.vulnerabilities.length > 0
  ) {
    const token = core.getInput('github-token', { required: true })
    console.log('getLastComment', await getLastComment(token))
    comment(token, output, signature)
  }
}

async function getLastComment(token: string): Promise<string | undefined> {
  if (!github.context.payload.pull_request) {
    return
  }
  const octokit = github.getOctokit(token)
  const result = await octokit.rest.issues.listComments({
    owner: github.context.repo.owner,
    repo: github.context.repo.repo,
    user: github.context.actor,
    issue_number: github.context.payload.pull_request.number,
  })

  const regex = /<!-- vulncheck-scan-signature: ([a-f0-9]{64}) -->/
  const found = result.data.find(item => regex.test(item.body as string))
  const match = found?.body?.match(regex)
  return match ? match[1] : undefined
}

async function comment(
  token: string,
  output: ScanResult,
  signature: string,
): Promise<void> {
  const octokit = github.getOctokit(token)

  let commentBody = `<img src="https://vulncheck.com/logo.png" alt="logo" height="15px" /> VulnCheck has detected **${output.vulnerabilities.length}** vulnerabilities\n\n`

  commentBody +=
    '| Name | Version | CVE | CVSS Base Score | CVSS Temporal Score | Fixed Versions |\n| ---- | ------- | --- | --------------- | ------------------ | -------------- |\n'

  output.vulnerabilities.map(
    vuln =>
      (commentBody += `| ${vuln.name} | ${vuln.version} | [${vuln.cve}](https://vulncheck.com/browse/cve/${vuln.cve}) | ${vuln.cvss_base_score} | ${vuln.cvss_temporal_score} | ${vuln.fixed_versions} |\n`),
  )

  commentBody += `\n\n
<br />
<sup>Report generated by <a href="https://github.com/vulncheck-oss/action">The VulnCheck Action</a></sup>
<!-- vulncheck-scan-signature: ${signature} -->
<!-- vulncheck-scan-report: ${JSON.stringify(output)} -->
`

  if (github.context.payload.pull_request) {
    await octokit.rest.issues.createComment({
      owner: github.context.repo.owner,
      repo: github.context.repo.repo,
      issue_number: github.context.payload.pull_request.number,
      body: commentBody,
      event: 'COMMENT',
    })
  }
}
